#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>

Servo ds5180;  // Create a servo object to control the ds5180 servo

const int potPinAngle = A2;   // Analog pin for the potentiometer (angle control)
const int potPinrpm = A0;     // Analog pin for the potentiometer (RPM control) 
const int switchPin = 2;      // Digital pin for the switch
const int greenLedPin = 4;    // Digital pin for green LED
const int redLedPin = 6;      // Digital pin for red LED
int potValAngle;              // Variable to store the potentiometer value for angle
int potValrpm;                // Variable to store the potentiometer value for RPM
int servoPos;                 // Variable to store the servo position               // Variable to store the value of servoPos when the volume is 80
unsigned long previousMillis = 0; // Will store last time the servo was updated
const unsigned long interval = 1000; // Interval time for the servo to change position

LiquidCrystal_I2C lcd(0x27, 20, 4);

bool motorRunning = false;    // Flag to track if the motor is running

void setup() {
  ds5180.attach(9);  // Attach the servo to pin 9 on the Arduino
  ds5180.write(80);  // Ensure the servo is at its starting position (80 degrees)

  pinMode(switchPin, INPUT_PULLUP);
  pinMode(greenLedPin, OUTPUT);
  pinMode(redLedPin, OUTPUT);
  
  digitalWrite(greenLedPin, LOW);  // Initially turn off green LED
  digitalWrite(redLedPin, LOW);    // Initially turn off red LED
  
  lcd.init();
  lcd.backlight();
}

void loop() {
  int switchState = digitalRead(switchPin);
  
  if (switchState == LOW) {
    // Switch has just been turned ON
    if (!motorRunning) {
      ds5180.attach(9);  // Reattach the servo
      motorRunning = true;
    }
    digitalWrite(greenLedPin, HIGH);  // Green LED on
    digitalWrite(redLedPin, LOW); 
  } else {
    // Switch has just been turned OFF
    if (motorRunning) {
      ds5180.detach();  // Detach the servo to stop it from receiving control signals
      motorRunning = false;
    }
    digitalWrite(greenLedPin, LOW);   // Green LED off
    digitalWrite(redLedPin, HIGH);    // Red LED on
  }

  // Read the values from the potentiometers
  potValAngle = analogRead(potPinAngle);   // Read potentiometer value for angle (0-1023)
  potValrpm = analogRead(potPinrpm);       // Read potentiometer value for RPM (0-1023)
  
  // Map the potentiometer value to the desired range
  int minAngle = 80;
  int maxAngle = 10;
  servoPos = map(potValAngle, 0, 1023, minAngle, maxAngle);  // Map angle potentiometer value to 80-10 degrees

  // Map the potentiometer value to the desired RPM range (30-80)
  int desiredRPM = map(potValrpm, 0, 1023, 30, 80);
  
  // Calculate delay based on desired RPM and number of rotations (10 to 30 rotations)
  float delayTimePerRotation = 60000.0 / (desiredRPM * 10);  // Calculate delay per rotation
  int totalDelayTime = delayTimePerRotation * 10;  // Calculate total delay for 10 rotations
  
  lcd.setCursor(4, 0);
  lcd.print("Welcome User");

  // Display the current speed and angle as percentages on the LCD
  lcd.setCursor(3, 2); // Move cursor to position for speed
  lcd.print("BPM ");
  lcd.setCursor(3, 3);
  int displayedBPM = map(potValrpm, 0, 1023, 10, 20);  // Directly map the pot value to 10-20 for display
  lcd.print(displayedBPM);
  lcd.print("    "); // Clear any old data

  lcd.setCursor(11, 2); // Move cursor to position for angle
  lcd.print("Volume ");
  lcd.setCursor(13, 3);
  int displayedVolume = map(potValAngle, 0, 1023, 0, 100);  // Map potValAngle from 0-1023 to 0-100 for display
  lcd.print(displayedVolume);
  lcd.print("%   "); // Clear any old data


  if (displayedVolume < 35) {
    ds5180.detach();  // Detach the servo to stop it from receiving control signals
  }

  if (motorRunning && displayedVolume >= 35) {
    // Check if it's time to update the servo position
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;  // Save the last time the servo was updated
    
      // Move the servo to the desired position
      static int state = 0;
      switch (state) {
        case 0:
          ds5180.write(80);  // Ensure the servo is at 80 degrees
          state = 1;
          break;
        case 1:
          ds5180.write(servoPos); // Move to the desired position
          state = 2;
          break;
        case 2:
          ds5180.write(80);  // Return to 80 degrees
          state = 0;
          break;
      }
    
      // Delay for the calculated totalDelayTime
      delay(totalDelayTime);
    }
  } else {
    // If the motor is not running or volume is less than 35%, stop the servo
    ds5180.write(80);
  }
}
